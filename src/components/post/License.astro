---
import { formatDate } from '$/utils/dates'
import { Icon } from 'astro-icon/components'
import siteConfig from '$/config/site'
import strings from '$/config/strings'
import type { LicenseConfig } from '$/types/config'

export interface Props {
  config: LicenseConfig
  title: string
  pubDate: Date
  class?: string
}

const { config, title, pubDate, class: className } = Astro.props
const postUrl = decodeURIComponent(Astro.url.toString())
---

<div class:list={['license', className]}>
  <hgroup>
    <header>{title}</header>
    <a href={postUrl}>{postUrl}</a>
  </hgroup>
  <div class="details">
    <div>
      <header>
        {strings.license.author}
      </header>
      <div class="details-text">
        {siteConfig.profile.name}
      </div>
    </div>
    <div>
      <header>
        {strings.license.publishedAt}
      </header>
      <div class="details-text">
        {formatDate(pubDate)}
      </div>
    </div>
    <div>
      <header>
        {strings.license.license}
      </header>
      <a href={config.url} target="_blank" class="details-link" rel="license">
        {config.name}
      </a>
    </div>
  </div>
  <Icon name="tabler:creative-commons" class="cc-icon" />
</div>

<style lang="scss">
  @use '$/styles/classes';
  @use '$/styles/theme' as *;

  .license {
    position: relative;

    border-radius: var(--radius-xl);

    background-color: var(--color-license-bg);

    padding-block: spacing(5);
    padding-inline: spacing(6);

    overflow: hidden;

    hgroup {
      header {
        color: var(--color-license-title);

        font-weight: var(--fw-bold);
      }

      a {
        @extend %link;

        color: var(--color-primary);
      }
    }

    .details {
      display: block flex;

      flex-direction: row;

      gap: spacing(6);

      margin-block-start: spacing(2);

      header {
        color: var(--color-license-details-header);

        font-size: var(--text-sm);
      }

      .details-text {
        white-space: nowrap;
        color: var(--color-license-details-text);
      }

      .details-link {
        @extend %link;
        white-space: nowrap;
        color: var(--color-primary);
      }

      @media (width < $breakpoint-sm) {
        flex-direction: column;

        gap: spacing(3);
      }
    }

    .cc-icon {
      position: absolute;
      inset-block-end: 50%;
      inset-inline-end: spacing(6);

      translate: 0 50%;

      transition-duration: var(--transition-duration);
      transition-property: var(--transition-properties);
      transition-timing-function: var(--transition-function);

      block-size: spacing(60);
      inline-size: spacing(60);

      color: var(--color-license-cc-icon);

      pointer-events: none;

      @media (width < $breakpoint-sm) {
        inset-inline-end: 50%;

        translate: 50% 50%;
      }
    }
  }
</style>
