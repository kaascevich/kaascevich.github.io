---
import type { CollectionEntry } from 'astro:content'

import strings from '$/config/strings'
import { url } from '$/utils/urls'

import MetaItem from '$/components/post/meta/MetaItem.astro'
import MetaDate from '$/components/post/meta/MetaDate.astro'
import MetaLink from '$/components/post/meta/MetaLink.astro'

interface Props {
  class: string
  entry: CollectionEntry<'posts'>
  compactOnMobile?: boolean
}

const { class: className, entry, compactOnMobile = false } = Astro.props
const { published, updated, category, tags } = entry.data

const showUpdated =
  updated !== undefined && updated.getTime() !== published.getTime()
---

<div class:list={['meta-items', className]}>
  <MetaDate icon="tabler:calendar-plus" date={published} />
  {showUpdated && <MetaDate icon="tabler:calendar-cog" date={updated} />}

  <MetaItem icon="tabler:category">
    <MetaLink
      href={url(`/archive/category/${category}/`)}
      label={strings.alts.category(category)}
    >
      {category}
    </MetaLink>
  </MetaItem>

  <MetaItem icon="tabler:hash" hideOnMobile={compactOnMobile}>
    <ul>
      {
        tags.length === 0 ? (
          <li>{strings.tags.none}</li>
        ) : (
          tags.map((tag) => (
            <li>
              <MetaLink
                href={url(`/archive/tag/${tag}/`)}
                label={strings.alts.tag(tag)}
              >
                {tag}
              </MetaLink>
            </li>
          ))
        )
      }
    </ul>
  </MetaItem>
</div>

<style lang="scss">
  @use '$/styles/theme' as *;
  @use '$/styles/utils' as *;
  @use '$/styles/variants';

  .meta-items {
    @apply flex flex-wrap text-neutral-500 dark:text-neutral-400 items-center gap-4 gap-x-4 gap-y-2;
  }

  ul {
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    align-items: center;
    white-space: nowrap;

    li {
      @include transition();
    }

    li + li::before {
      content: ' /';
      white-space: pre;
      color: var(--meta-divider);
    }
  }
</style>
