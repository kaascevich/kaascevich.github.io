---
import type { Post } from '$/types/content'

import strings from '$/config/strings'

import MetaItem from './MetaItem.astro'
import MetaDate from './items/MetaDate.astro'
import MetaLink from './items/MetaLink.astro'
import MetaList from './items/MetaList.astro'

export interface Props {
  class?: string
  entry: Post
  compactOnMobile?: boolean
}

const { class: className, entry, compactOnMobile = false } = Astro.props
const { published, updated, category, tags } = entry.data

const showUpdated =
  updated !== undefined && updated.getTime() !== published.getTime()
---

<div class:list={['meta-items', className]}>
  <MetaItem icon="tabler:calendar-plus" label={strings.alts.published}>
    <MetaDate date={published} />
  </MetaItem>
  {
    showUpdated && (
      <MetaItem icon="tabler:calendar-cog" label={strings.alts.updated}>
        <MetaDate date={updated} />
      </MetaItem>
    )
  }

  <MetaItem icon="tabler:category" label={strings.alts.categories}>
    <MetaLink
      href={`/archive/category/${category}/`}
      label={strings.alts.category(category)}
    >
      {category}
    </MetaLink>
  </MetaItem>

  <MetaItem
    icon="tabler:hash"
    hideOnMobile={compactOnMobile}
    label={strings.alts.tags}
  >
    <MetaList>
      {
        tags.length === 0 ? (
          <li>{strings.tags.none}</li>
        ) : (
          tags.map((tag) => (
            <li>
              <MetaLink
                href={`/archive/tag/${tag}/`}
                label={strings.alts.tag(tag)}
              >
                {tag}
              </MetaLink>
            </li>
          ))
        )
      }
    </MetaList>
  </MetaItem>
</div>

<style lang="scss">
  @use '$/styles/classes';
  @use '$/styles/theme' as *;
  @use '$/styles/variants' as *;

  .meta-items {
    display: block flex;

    flex-wrap: wrap;

    gap: spacing(2) spacing(4);

    align-items: center;
  }
</style>
