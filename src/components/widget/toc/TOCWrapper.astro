---
import type { MarkdownHeading } from 'astro'

import siteConfig from '$/config/site'
import TOC from './TOC.astro'

export interface Props {
  headings: readonly MarkdownHeading[]
}
const { headings } = Astro.props
---

<div class="outer-wrapper">
  <div class="inner-wrapper">
    {
      siteConfig.toc === undefined || headings.length === 0 ? (
        // #toc needs to exist for Swup to work properly
        <div id="toc" />
      ) : (
        <div
          id="toc-wrapper"
          class:list={{ 'toc-hide': siteConfig.banner !== undefined }}
        >
          <TOC config={siteConfig.toc} {headings} />
        </div>
      )
    }
  </div>
</div>

<script>
  import { BANNER_HEIGHT } from '$/constants/constants'

  window.addEventListener('scroll', () => {
    if (document.getElementById('banner-wrapper') === null) {
      return
    }

    const toc = document.getElementById('toc-wrapper')
    if (toc !== null) {
      const bannerHeight = window.innerHeight * (BANNER_HEIGHT / 100)

      if (
        document.body.scrollTop > bannerHeight ||
        document.documentElement.scrollTop > bannerHeight
      ) {
        toc.classList.remove('toc-hide')
      } else {
        toc.classList.add('toc-hide')
      }
    }
  })
</script>

<style lang="scss">
  @use '$/styles/main';
  @use '$/styles/theme' as *;
  @use '$/styles/utils' as *;
  @use '$/styles/variants' as *;

  .outer-wrapper {
    position: absolute;

    z-index: 0;

    inline-size: 100%;

    .inner-wrapper {
      position: relative;

      margin-inline: auto;

      max-inline-size: var(--page-width);
    }

    @media (width < $breakpoint-xl2) {
      display: none;
    }
  }

  #toc-wrapper {
    position: absolute;
    inset-block-start: 0;
    inset-inline-end: calc(var(--toc-width) * -1);

    align-items: center;

    inline-size: var(--toc-width);

    &.toc-hide,
    &.toc-not-ready {
      opacity: 0%;

      pointer-events: none;
    }

    @media (width < $breakpoint-lg) {
      display: none;
    }
  }
</style>
