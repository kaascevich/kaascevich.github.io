---
import { Icon } from 'astro-icon/components'
import strings from '$/config/strings'

interface Props {
  id: string
  name?: string
  isCollapsed?: boolean
  collapsedHeight?: string
  class?: string
}

const {
  id,
  name,
  isCollapsed,
  collapsedHeight,
  class: className,
} = Astro.props
---

<widget-layout
  data-id={id}
  data-is-collapsed={String(isCollapsed)}
  class={className}
>
  <header>{name}</header>
  <div {id} class:list={['widget-content', { collapsed: isCollapsed }]}>
    <slot />
  </div>
  {
    isCollapsed === true && (
      <button class="expand">
        <div class="icon-wrapper">
          <Icon name="tabler:dots" />
          {strings.widget.more}
        </div>
      </button>
    )
  }
</widget-layout>

<style lang="scss" define:vars={{ 'collapsed-height': collapsedHeight }}>
  @use '$/styles/main';
  @use '$/styles/theme' as *;
  @use '$/styles/utils' as *;
  @use '$/styles/variants';

  widget-layout {
    @extend %card-base;

    padding-bottom: spacing(4);

    header {
      @include transition;
      @include font-size($text-lg);

      position: relative;
      margin-top: spacing(4);
      margin-bottom: spacing(2);
      margin-left: spacing(8);

      color: $color-neutral-900;

      font-weight: $font-weight-bold;

      @include variants.dark {
        color: $color-neutral-100;
      }

      &::before {
        content: '';

        position: absolute;
        top: 5.5px;
        left: -16px;
        width: spacing(1);
        height: spacing(4);

        border-radius: $radius-md;

        background-color: var(--primary);
      }
    }

    .widget-content {
      padding-right: spacing(4);
      padding-left: spacing(4);
      overflow: hidden;

      &.collapsed {
        height: var(--collapsed-height);
      }
    }

    button.expand {
      @extend %btn-plain;

      width: stretch;
      height: spacing(9);
      margin-right: spacing(4);
      margin-bottom: spacing(-2);
      margin-left: spacing(4);

      border-radius: $radius-lg;

      .icon-wrapper {
        display: flex;
        align-items: center;
        justify-content: center;

        color: var(--primary);
        gap: spacing(2);
        translate: spacing(-2);

        svg {
          width: spacing(7);
          height: spacing(7);
        }
      }
    }
  }
</style>

<script>
  class WidgetLayout extends HTMLElement {
    constructor() {
      super()

      if (this.dataset.isCollapsed !== 'true') {
        return
      }

      const btn = this.querySelector<HTMLButtonElement>('.expand')!
      const wrapper = document.getElementById(this.dataset.id!)!
      btn.addEventListener('click', () => {
        wrapper.classList.remove('collapsed')
        btn.style.display = 'none'
      })
    }
  }

  customElements.define('widget-layout', WidgetLayout)
</script>
