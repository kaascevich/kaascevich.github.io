---
import { Icon } from 'astro-icon/components'
import strings from '$/config/strings'

export interface Props {
  id: string
  name?: string
  isCollapsed?: boolean
  collapsedHeight?: string
  class?: string
}

const { id, name, isCollapsed, collapsedHeight, class: className } = Astro.props
---

<widget-layout
  data-id={id}
  data-is-collapsed={String(isCollapsed)}
  class={className}
>
  <header>{name}</header>
  <div {id} class:list={['widget-content', { collapsed: isCollapsed }]}>
    <slot />
  </div>
  {
    isCollapsed === true && (
      <button class="expand">
        <div class="icon-wrapper">
          <Icon name="tabler:dots" />
          {strings.widget.more}
        </div>
      </button>
    )
  }
</widget-layout>

<style lang="scss" define:vars={{ 'collapsed-height': collapsedHeight }}>
  @use '$/styles/classes';
  @use '$/styles/theme' as *;

  widget-layout {
    @extend %card-base;

    padding-block-end: spacing(4);

    header {
      position: relative;

      margin-block: spacing(4) spacing(2);
      margin-inline-start: spacing(8);

      color: var(--color-widget-header);

      font-size: var(--text-lg);
      font-weight: var(--fw-bold);

      &::before {
        position: absolute;
        inset-block-start: 5.5px;
        inset-inline-start: -16px;

        border-radius: var(--radius-md);

        background-color: var(--color-primary);

        block-size: spacing(4);
        inline-size: spacing(1);

        content: '';
      }
    }

    .widget-content {
      padding-inline: spacing(4);

      overflow: hidden;

      &.collapsed {
        block-size: var(--collapsed-height);
      }
    }

    button.expand {
      @extend %btn-plain;
      margin-block-end: spacing(-2);
      margin-inline: spacing(4);

      border-radius: var(--radius-lg);

      block-size: spacing(9);
      inline-size: stretch;

      .icon-wrapper {
        display: block flex;
        position: relative;
        left: spacing(-2);

        gap: spacing(2);

        align-items: center;
        justify-content: center;

        color: var(--color-primary);

        [data-icon] {
          block-size: spacing(7);
          inline-size: spacing(7);
        }
      }
    }
  }
</style>

<script>
  class WidgetLayout extends HTMLElement {
    constructor() {
      super()

      if (this.dataset.isCollapsed !== 'true') {
        return
      }

      const btn = this.querySelector<HTMLButtonElement>('.expand')!
      const wrapper = document.getElementById(this.dataset.id!)!
      btn.addEventListener('click', () => {
        wrapper.classList.remove('collapsed')
        btn.style.display = 'none'
      })
    }
  }

  customElements.define('widget-layout', WidgetLayout)
</script>
