---
import { Icon } from "astro-icon/components"
import { i18n } from "$/i18n/translation"
import I18nKey from "$/i18n/i18nKey"

type Props = Readonly<{
  id: string
  name?: string | undefined
  isCollapsed?: boolean | undefined
  collapsedHeight?: string | undefined
  class?: string | undefined
  style?: string | undefined
}>

const {
  id,
  name,
  isCollapsed,
  collapsedHeight,
  class: className,
  style,
} = Astro.props
---

<widget-layout
  data-id={id}
  data-is-collapsed={String(isCollapsed)}
  class={className}
  {style}
>
  <div class="widget-title">
    {name}
  </div>
  <div {id} class:list={["widget-content", { collapsed: isCollapsed }]}>
    <slot />
  </div>
  {
    isCollapsed === true && (
      <div class="expand-button">
        <button>
          <div class="icon-wrapper">
            <Icon name="tabler:dots" size="1.75rem" /> {i18n(I18nKey.more)}
          </div>
        </button>
      </div>
    )
  }
</widget-layout>

<style lang="scss" define:vars={{ collapsedHeight }}>
  @use "$/styles/main";

  widget-layout {
    @extend .card-base;
    padding-bottom: spacing(4);

    .widget-title {
      font-weight: theme.$font-weight-bold;
      @include font(theme.$text-lg...);

      transition: theme.$ease-in-out theme.$transition-duration {
        property:
          color, background-color, border-color, text-decoration-color, fill,
          stroke, opacity, box-shadow, transform, filter, backdrop-filter;
      }

      color: theme.$color-neutral-900;
      position: relative;
      margin: {
        left: spacing(8);
        top: spacing(4);
        bottom: spacing(2);
      }

      @include variants.dark {
        color: theme.$color-neutral-100;
      }

      @include variants.before {
        width: spacing(1);
        height: spacing(4);
        border-radius: theme.$radius-md;
        background-color: var(--primary);
        position: absolute;
        left: -16px;
        top: 5.5px;
      }
    }

    .widget-content {
      padding: {
        left: spacing(4);
        right: spacing(4);
      }
      overflow: hidden;

      &.collapsed {
        height: var(--collapsedHeight);
      }
    }

    .expand-button {
      padding: {
        left: spacing(4);
        right: spacing(4);
      }
      margin-bottom: spacing(-2);

      button {
        @extend .btn-plain;
        border-radius: theme.$radius-lg;
        width: 100%;
        height: spacing(9);

        .icon-wrapper {
          color: var(--primary);
          display: flex;
          align-items: center;
          justify-content: center;
          gap: spacing(2);
          translate-x: spacing(-2);
        }
      }
    }
  }
</style>

<script>
  class WidgetLayout extends HTMLElement {
    constructor() {
      super()

      if (this.dataset.isCollapsed !== "true") return

      const id = this.dataset.id
      const btn = this.querySelector(".expand-button")!
      const wrapper = this.querySelector(`#${id}`)!
      btn.addEventListener("click", () => {
        wrapper.classList.remove("collapsed")
        btn.classList.add("hidden")
      })
    }
  }

  customElements.define("widget-layout", WidgetLayout)
</script>
