---
import { Icon } from 'astro-icon/components'
import strings from '$/config/strings'

type Props = Readonly<{
  id: string
  name?: string | undefined
  isCollapsed?: boolean | undefined
  collapsedHeight?: string | undefined
  class?: string | undefined
  style?: string | undefined
}>

const {
  id,
  name,
  isCollapsed,
  collapsedHeight,
  class: className,
  style,
} = Astro.props
---

<widget-layout
  data-id={id}
  data-is-collapsed={String(isCollapsed)}
  class={className}
  {style}
>
  <header>{name}</header>
  <div {id} class:list={['widget-content', { collapsed: isCollapsed }]}>
    <slot />
  </div>
  {
    isCollapsed === true && (
      <div class="expand-button">
        <button>
          <div class="icon-wrapper">
            <Icon name="tabler:dots" size="1.75rem" />
            {strings.widget.more}
          </div>
        </button>
      </div>
    )
  }
</widget-layout>

<style lang="scss" define:vars={{ collapsedHeight }}>
  @use '$/styles/main';
  @use '$/styles/theme' as *;
  @use '$/styles/utils' as *;
  @use '$/styles/variants';

  widget-layout {
    @extend .card-base;
    padding-bottom: spacing(4);

    header {
      font-weight: $font-weight-bold;
      @include font-size($text-lg);

      @include transition();
      position: relative;
      color: $color-neutral-900;
      margin: {
        top: spacing(4);
        bottom: spacing(2);
        left: spacing(8);
      }

      @include variants.dark {
        color: $color-neutral-100;
      }

      @include before {
        position: absolute;
        top: 5.5px;
        left: -16px;
        border-radius: $radius-md;
        background-color: var(--primary);
        width: spacing(1);
        height: spacing(4);
      }
    }

    .widget-content {
      @include padding-x(spacing(4));
      overflow: hidden;

      &.collapsed {
        height: var(--collapsedHeight);
      }
    }

    .expand-button {
      @include padding-x(spacing(4));
      margin-bottom: spacing(-2);

      button {
        @extend .btn-plain;
        border-radius: $radius-lg;
        width: 100%;
        height: spacing(9);

        .icon-wrapper {
          display: flex;
          justify-content: center;
          align-items: center;
          gap: spacing(2);
          translate: spacing(-2);
          color: var(--primary);
        }
      }
    }
  }
</style>

<script>
  class WidgetLayout extends HTMLElement {
    constructor() {
      super()

      if (this.dataset.isCollapsed !== 'true') {
        return
      }

      const id = this.dataset.id
      const btn = this.querySelector('.expand-button')
      const wrapper = this.querySelector(`#${id}`)
      btn?.addEventListener('click', () => {
        wrapper?.classList.remove('collapsed')
        btn.classList.add('hidden')
      })
    }
  }

  customElements.define('widget-layout', WidgetLayout)
</script>
