---
import type { Post } from '$/types/content'

import { getPostUrlByID } from '$/utils/urls'

export interface Props {
  post: Post
}
const { post } = Astro.props

const formatDate = new Intl.DateTimeFormat('en-US', {
  month: 'numeric',
  day: '2-digit',
}).format

function formatTagList(tags: readonly string[]) {
  return tags.map((x) => `#${x}`).join(' ')
}
---

<a href={getPostUrlByID(post.id)} aria-label={post.data.title}>
  <div class="item-wrapper">
    <!-- date -->
    <time datetime={post.data.published.toISOString()}>
      {formatDate(post.data.published)}
    </time>

    <!-- dot and line -->
    <div class="separator">
      <div></div>
    </div>

    <!-- post title -->
    <div class="title">
      {post.data.title}
    </div>

    <!-- tag list -->
    <div class="tag-list">
      {formatTagList(post.data.tags)}
    </div>
  </div>
</a>

<style lang="scss">
  @use '$/styles/classes';
  @use '$/styles/theme' as *;

  %dash-line {
    position: relative;

    &::before {
      position: absolute;
      inset-inline-start: calc(50% - 1px);

      translate: 0 -50%;

      transition: all 300ms;

      border-inline-start: 2px dashed var(--color-archive-border);

      block-size: 100%;
      inline-size: 10%;

      content: '';

      pointer-events: none;
    }
  }

  a {
    @extend %btn-plain;

    display: block flow !important;

    border-radius: var(--radius-lg);

    block-size: spacing(10);
    inline-size: 100%;

    &:hover {
      color: initial;

      .title {
        padding-inline-start: spacing(1);

        color: var(--color-primary) !important;
      }

      .separator div {
        outline-color: var(--color-btn-plain-bg-hover);

        background-color: var(--color-primary);

        block-size: spacing(5);
      }
    }

    &:active .separator div {
      outline-color: var(--color-btn-plain-bg-active);
    }

    .item-wrapper {
      display: block grid;

      grid-template: 'date separator title tags' / 10% 10% 45% 35%;

      align-items: center;
      justify-content: flex-start;

      block-size: 100%;

      @media (width < $breakpoint-md) {
        grid-template: 'date separator title' / 15% 15% 75%;
      }
    }

    time {
      grid-area: date;

      text-align: end;

      color: var(--color-archive-date);
    }

    .separator {
      @extend %dash-line;

      display: block flex;
      position: relative;

      grid-area: separator;

      align-items: center;

      block-size: 100%;

      div {
        transition-duration: var(--transition-duration);
        transition-property: all;
        transition-timing-function: var(--transition-function);

        z-index: 50;

        margin-inline: auto;

        outline: 4px solid var(--color-card-bg);

        border-radius: var(--radius-sm);

        background-color: var(--color-archive-separator);

        block-size: spacing(1);
        inline-size: spacing(1);
      }
    }

    .title {
      grid-area: title;

      transition-duration: var(--transition-duration);
      transition-property: all;
      transition-timing-function: var(--transition-function);

      padding-inline-end: spacing(8);

      overflow: hidden;

      text-align: start;
      text-overflow: ellipsis;

      white-space: nowrap;
      color: var(--color-archive-title);

      font-weight: var(--fw-bold);
    }

    .tag-list {
      grid-area: tags;

      margin-inline-end: spacing(3);

      overflow: hidden;

      text-align: end;
      text-overflow: ellipsis;

      white-space: nowrap;
      color: var(--color-archive-tags);

      font-size: var(--text-sm);

      @media (width < $breakpoint-md) {
        display: none;
      }
    }
  }
</style>
