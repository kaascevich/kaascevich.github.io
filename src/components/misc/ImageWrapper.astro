---
import path from 'node:path'
import { Image } from 'astro:assets'
import type { ImageMetadata } from 'astro'

export interface Props {
  id?: string
  src: string
  class?: string
  alt: string
  loading?: 'eager' | 'lazy'
  position?: 'top' | 'center' | 'bottom'
  basePath?: string
}

const {
  id,
  src,
  class: className,
  alt,
  loading,
  position = 'center',
  basePath = '/',
} = Astro.props

const isRemote = src.match(/^(?:\/|(?:https?|data):).*/g)

// FIXME: temporary workaround for images dynamic import
// https://github.com/withastro/astro/issues/3373
const img = await (() => {
  if (isRemote) {
    return null
  }

  const files = import.meta.glob<ImageMetadata>('../../**', {
    import: 'default',
  })

  const normalizedPath = path.join('../../', basePath, src).replace('\\', '/')

  const file = files[normalizedPath]
  if (file === undefined) {
    throw new Error(
      `Image file not found: ${normalizedPath.replace('../../', 'src/')}`,
    )
  }

  return file()
})()
---

<div {id} class={className}>
  {
    img === null ? (
      <img {src} {alt} {loading} />
    ) : (
      <Image src={img} {alt} {loading} />
    )
  }
</div>

<style lang="scss" define:vars={{ position }}>
  @use '$/styles/classes';
  @use '$/styles/theme' as *;

  div {
    position: relative;

    overflow: hidden;

    img {
      block-size: 100%;
      inline-size: 100%;

      object-fit: cover;
      object-position: var(--position);

      filter: var(--image-filter);
    }
  }
</style>
