---
import path from "node:path"
import { Image } from "astro:assets"
import { url } from "$/utils/url-utils"
import type { ImageMetadata } from "astro"

type Props = Readonly<{
  id?: string | undefined
  src: string
  class?: string | undefined
  alt?: string | undefined
  loading?: "eager" | "lazy" | undefined
  position?: string | undefined
  basePath?: string | undefined
}>

const {
  id,
  src,
  class: className,
  alt,
  loading,
  position = "center",
  basePath = "/",
} = Astro.props

const isLocal = !(
  src.startsWith("/") ||
  src.startsWith("http") ||
  src.startsWith("https") ||
  src.startsWith("data:")
)
const isPublic = src.startsWith("/")

// TODO: temporary workaround for images dynamic import
// https://github.com/withastro/astro/issues/3373
let img: ImageMetadata | undefined
if (isLocal) {
  const files = import.meta.glob<ImageMetadata>("../../**", {
    import: "default",
  })

  const normalizedPath = path
    .normalize(path.join("../../", basePath, src))
    .replace(/\\/g, "/")

  const file = files[normalizedPath]
  if (file === undefined) {
    console.error(
      `\n[ERROR] Image file not found: ${normalizedPath.replace("../../", "src/")}`,
    )
  } else {
    img = await file()
  }
}

const imageClass = "w-full h-full object-cover"
const imageStyle = `object-position: ${position}`
---

<div {id} class:list={[className, "overflow-hidden relative"]}>
  <div
    class="transition absolute inset-0 dark:bg-black/10 bg-opacity-50 pointer-events-none"
  >
  </div>
  {
    isLocal && img !== undefined && (
      <Image
        src={img}
        alt={alt ?? ""}
        class={imageClass}
        style={imageStyle}
        {loading}
      />
    )
  }
  {
    !isLocal && (
      <img
        src={isPublic ? url(src) : src}
        alt={alt ?? ""}
        class={imageClass}
        style={imageStyle}
        {loading}
      />
    )
  }
</div>
