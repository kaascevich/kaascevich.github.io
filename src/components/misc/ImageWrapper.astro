---
import path from 'node:path'
import { Image } from 'astro:assets'
import type { ImageMetadata } from 'astro'

interface Props {
  id?: string
  src: string
  class?: string
  alt: string
  loading?: 'eager' | 'lazy'
  position?: 'top' | 'center' | 'bottom'
  basePath?: string
}

const {
  id,
  src,
  class: className,
  alt,
  loading,
  position = 'center',
  basePath = '/',
} = Astro.props

const isLocal = !(
  src.startsWith('/') ||
  src.startsWith('http') ||
  src.startsWith('https') ||
  src.startsWith('data:')
)

// TODO: temporary workaround for images dynamic import
// https://github.com/withastro/astro/issues/3373
let img: ImageMetadata | undefined
if (isLocal) {
  const files = import.meta.glob<ImageMetadata>('../../**', {
    import: 'default',
  })

  const normalizedPath = path
    .normalize(path.join('../../', basePath, src))
    .replace(/\\/g, '/')

  const file = files[normalizedPath]
  if (file === undefined) {
    throw new Error(
      `Image file not found: ${normalizedPath.replace('../../', 'src/')}`,
    )
  }

  img = await file()
}
---

<div {id} class={className}>
  {
    img === undefined ? (
      <img src={src} {alt} {loading} />
    ) : (
      <Image src={img} {alt} {loading} />
    )
  }
</div>

<style lang="scss" define:vars={{ position }}>
  @use '$/styles/theme' as *;
  @use '$/styles/utils' as *;
  @use '$/styles/variants';

  div {
    position: relative;
    overflow: hidden;

    img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      object-position: var(--position);

      @include variants.dark {
        filter: brightness(0.9);
      }
    }
  }
</style>
