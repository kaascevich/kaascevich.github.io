---
function capitalize(string: string): string {
  return string.charAt(0).toUpperCase() + string.slice(1).toLowerCase()
}

type Props = Readonly<{
  /** The title for this callout. Defaults to the callout type. */
  title?: string | undefined
  /** The callout type. */
  type: 'tip' | 'note' | 'important' | 'warning' | 'caution'
}>
const { title, type } = Astro.props
---

<blockquote class={`bdm-${type}`}>
  <header>{title ?? capitalize(type)}</header>
  <slot />
</blockquote>

<style lang="scss">
  @use 'sass:math';
  @use '$/styles/theme' as *;
  @use '$/styles/utils' as *;
  @use '$/styles/variants';

  blockquote {
    $callouts: (
      tip:
        "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1rem' height='1rem' viewBox='0 0 24 24' aria-hidden='true'%3E%3Cpath fill='none' stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M3 12h1m8-9v1m8 8h1M5.6 5.6l.7.7m12.1-.7l-.7.7M9 16a5 5 0 1 1 6 0a3.5 3.5 0 0 0-1 3a2 2 0 0 1-4 0a3.5 3.5 0 0 0-1-3m.7 1h4.6'/%3E%3C/svg%3E",
      note:
        "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1rem' height='1rem' viewBox='0 0 24 24' aria-hidden='true'%3E%3Cg fill='none' stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' stroke-width='2'%3E%3Cpath d='M3 12a9 9 0 1 0 18 0a9 9 0 0 0-18 0m9-3h.01'/%3E%3Cpath d='M11 12h1v4h1'/%3E%3C/g%3E%3C/svg%3E",
      important:
        "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1rem' height='1rem' viewBox='0 0 24 24' aria-hidden='true'%3E%3Cpath fill='none' stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M8 9h8m-8 4h6m1 5l-3 3l-3-3H6a3 3 0 0 1-3-3V7a3 3 0 0 1 3-3h12a3 3 0 0 1 3 3v5.5M19 16v3m0 3v.01'/%3E%3C/svg%3E",
      warning:
        "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1rem' height='1rem' viewBox='0 0 24 24' aria-hidden='true'%3E%3Cpath fill='none' stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 9v4m-1.637-9.409L2.257 17.125a1.914 1.914 0 0 0 1.636 2.871h16.214a1.914 1.914 0 0 0 1.636-2.87L13.637 3.59a1.914 1.914 0 0 0-3.274 0zM12 16h.01'/%3E%3C/svg%3E",
      caution:
        "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='1rem' height='1rem' viewBox='0 0 24 24' aria-hidden='true'%3E%3Cpath fill='none' stroke='currentColor' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='m12.802 2.165l5.575 2.389c.48.206.863.589 1.07 1.07l2.388 5.574c.22.512.22 1.092 0 1.604l-2.389 5.575c-.206.48-.589.863-1.07 1.07l-5.574 2.388c-.512.22-1.092.22-1.604 0l-5.575-2.389a2.04 2.04 0 0 1-1.07-1.07l-2.388-5.574a2.04 2.04 0 0 1 0-1.604l2.389-5.575c.206-.48.589-.863 1.07-1.07l5.574-2.388a2.04 2.04 0 0 1 1.604 0M12 8v4m0 4h.01'/%3E%3C/svg%3E",
    );
    @each $type, $icon in $callouts {
      $color: var(--admonitions-color-#{$type});
      &.bdm-#{$type} {
        // left border
        @include before {
          background-color: $color;
        }

        header {
          color: $color;

          &::before {
            scale: 137.5%;
            mask-image: url($icon);
            background-color: $color;
          }
        }
      }
    }

    header {
      display: flex;
      align-items: center;
      margin-bottom: spacing(-3);
      font-weight: $font-weight-bold;

      @include before(' ') {
        display: inline-block;
        translate: 0 spacing(math.div(1, 8));
        margin-right: spacing(2.5);
        width: 1em;
        height: 1em;
        overflow: visible;
        font-size: inherit;
        mask: {
          size: contain;
          position: center;
          repeat: no-repeat;
        }
      }
    }
  }
</style>
