---
import { BANNER_HEIGHT_EXTEND } from '$/constants/constants'
import strings from '$/config/strings'
import type { BannerConfig } from '$/types/config'
import ImageWrapper from '$/components/misc/ImageWrapper.astro'

export interface Props {
  config: BannerConfig
}
const { config } = Astro.props
---

<div id="banner-wrapper" style={{ top: `-${BANNER_HEIGHT_EXTEND}vh` }}>
  <ImageWrapper
    id="banner"
    alt={strings.alts.banner}
    loading="eager"
    src={config.src}
    position={config.position}
  />
</div>

<script>
  import { BANNER_HEIGHT_EXTEND } from '$/constants/constants'

  window.addEventListener('resize', () => {
    // --banner-height-extend needs to be a multiple of 4 to avoid blurry text
    const offset = Math.floor(window.innerHeight * (BANNER_HEIGHT_EXTEND / 100))
    const boundedOffset = offset - (offset % 4)
    document.documentElement.style.setProperty(
      '--banner-height-extend',
      `${boundedOffset}px`,
    )
  })
</script>

<style lang="scss" define:vars={{ 'end-stop': 0.5, multiplier: 1 / 2 }}>
  @use '$/styles/classes';
  @use '$/styles/theme' as *;
  @use '$/styles/variants' as *;

  #banner-wrapper {
    position: absolute;

    transition-duration: 700ms;
    transition-property: var(--transition-properties);
    transition-timing-function: var(--transition-function);

    z-index: 10;

    inline-size: 100%;

    overflow: hidden;
    mask-image: linear-gradient(
      to top,
      #0000 calc(25% * var(--multiplier) * var(--end-stop)),
      calc(75% * var(--multiplier) * var(--end-stop)),
      black calc(var(--end-stop) * 100%)
    );

    :global(#banner) {
      scale: 105%;

      transition-duration: 700ms;
      transition-property: var(--transition-properties);
      transition-timing-function: var(--transition-function);

      opacity: 0%;

      block-size: 100%;

      object-fit: cover;
    }
  }
</style>
