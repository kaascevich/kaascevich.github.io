---
import type { NavBarLink } from "$/types/config"
import { Icon } from "astro-icon/components"
import { url as getURL } from "$/utils/urls"

type Props = Readonly<{
  links: readonly NavBarLink[]
}>

const { links } = Astro.props
---

<nav id="nav-menu-panel" class="float-panel-closed">
  {
    links.map(({ name, url, external = false }) => (
      <a
        href={external ? url : getURL(url)}
        target={external ? "_blank" : null}
      >
        <header>{name}</header>
        <Icon
          name={`tabler:${external ? "external-link" : "chevron-right"}`}
          size="1.25rem"
          class={`link-icon-${external ? "external" : "internal"}`}
        />
      </a>
    ))
  }
</nav>

<style lang="scss">
  @use "$/styles/main";
  @use "$/styles/theme" as *;
  @use "$/styles/utils" as *;
  @use "$/styles/variants";

  #nav-menu-panel {
    @extend .float-panel;
    @include transition($properties: all);
    position: fixed;
    right: spacing(4);
    padding: spacing(2);

    a {
      @include transition();
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: spacing(2) spacing(1) spacing(2) spacing(3);
      border-radius: $radius-lg;
      gap: spacing(8);
      &:hover {
        background-color: var(--btn-plain-bg-hover);
      }
      &:active {
        background-color: var(--btn-plain-bg-active);
      }

      header {
        @include transition();
        @include text-plain(75%);
        font-weight: $font-weight-bold;
      }
      &:is(:hover, :active) header {
        color: var(--primary);
      }

      .link-icon {
        @include transition();

        &-external {
          @include text-plain(25%);
        }
        &-internal {
          color: var(--primary);
        }
      }
    }
  }
</style>
