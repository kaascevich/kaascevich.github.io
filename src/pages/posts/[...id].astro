---
import type { Post } from '$/types/content'
import type { GetStaticPathsResult } from 'astro'
import type { WithContext, BlogPosting } from 'schema-dts'

import * as R from 'remeda'
import { render } from 'astro:content'
import License from '$/components/post/License.astro'
import Markdown from '$/components/post/Markdown.astro'
import PostHeader from '$/components/post/PostHeader.astro'
import PostPagination from '$/components/post/pagination/PostPagination.astro'
import MainGridLayout from '$/layouts/MainGridLayout.astro'
import siteConfig from '$/config/site'
import { formatDate } from '$/utils/dates'
import { getSortedPosts } from '$/utils/content'
import strings from '$/config/strings'

export async function getStaticPaths() {
  return R.map(await getSortedPosts(), (entry) => ({
    params: { id: entry.id },
    props: { entry },
  })) satisfies GetStaticPathsResult
}

interface Props {
  entry: Post
}

const { entry }: Props = Astro.props
const { Content, headings, remarkPluginFrontmatter } = await render(entry)

const jsonLd: WithContext<BlogPosting> = {
  '@context': 'https://schema.org',
  '@type': 'BlogPosting',

  headline: entry.data.title,
  description: entry.data.description,
  keywords: entry.data.tags,
  inLanguage: 'en-US',
  author: {
    '@type': 'Person',
    name: siteConfig.profile.name,
    url: siteConfig.url,
  },

  datePublished: formatDate(entry.data.published),
  dateModified: formatDate(entry.data.updated ?? entry.data.published),

  wordCount: remarkPluginFrontmatter.wordCount,
  timeRequired: strings.meta.minutes(remarkPluginFrontmatter.readingTime),

  copyrightYear: new Date().getFullYear(),
  license: siteConfig.license?.url,
}
---

<MainGridLayout
  title={entry.data.title}
  description={entry.data.description}
  setOGTypeArticle={true}
  {headings}
>
  <script
    is:inline
    slot="head"
    type="application/ld+json"
    set:html={JSON.stringify(jsonLd)}
  />

  <div class="post-container-wrapper">
    <div id="post-container" data-pagefind-body>
      <PostHeader
        {entry}
        wordCount={remarkPluginFrontmatter.words}
        readingTime={remarkPluginFrontmatter.minutes}
      />

      <Markdown class="markdown-content">
        <Content />
      </Markdown>

      {
        siteConfig.license !== undefined && (
          <License
            config={siteConfig.license}
            title={entry.data.title}
            pubDate={entry.data.published}
            class="license-container"
          />
        )
      }
    </div>
  </div>

  <PostPagination {entry} />
</MainGridLayout>

<style lang="scss">
  @use '$/styles/main';
  @use '$/styles/theme' as *;
  @use '$/styles/transition';
  @use '$/styles/utils' as *;
  @use '$/styles/variants';

  .post-container-wrapper {
    display: flex;
    position: relative;
    width: 100%;
    margin-bottom: spacing(4);
    overflow: hidden;

    border-radius: $radius-xl2;

    #post-container {
      @extend %card-base;

      position: relative;
      z-index: 10;
      width: 100%;
      padding: spacing(6) spacing(6) spacing(4);

      @include variants.md {
        padding-right: spacing(9);
        padding-left: spacing(9);
      }

      :global(.markdown-content) {
        @extend %onload-animation;

        margin-bottom: spacing(6);
      }

      :global(.license-container) {
        @extend %onload-animation;

        margin-bottom: spacing(6);

        border-radius: $radius-xl;
      }
    }
  }

  #post-container {
    $delays: (1: 0ms, 2: 50ms, 3: 100ms, 4: 175ms, 5: 250ms, 6: 325ms);

    @each $index, $delay in $delays {
      > :global(:nth-child(#{$index})) {
        animation-delay: calc(var(--content-delay) + #{$delay});
      }
    }
  }
</style>
