---
import MainGridLayout from '$/layouts/MainGridLayout.astro'
import Markdown from '$/components/post/Markdown.astro'

interface Props {
  frontmatter: Readonly<{
    title: string
    description?: string
  }>
}

const { title, description = title } = Astro.props.frontmatter

class InvalidPropError extends TypeError {
  constructor(
    readonly propName: string,
    readonly expectedType: string,
    readonly actualType: string,
  ) {
    super()
  }

  override get message() {
    return `\
invalid '${this.propName}' prop (type '${this.actualType}' \
is not assignable to '${this.expectedType}')` as const
  }
}

// Astro doesn't validate prop types in Markdown layouts, so we've gotta do it
// manually.
if (typeof title !== 'string') {
  throw new InvalidPropError('title', 'string', typeof title)
}
if (typeof description !== 'string') {
  throw new InvalidPropError('description', 'string', typeof description)
}
---

<MainGridLayout {title} {description}>
  <div class='outer-wrapper'>
    <div class='inner-wrapper'>
      <Markdown>
        <slot />
      </Markdown>
    </div>
  </div>
</MainGridLayout>

<style lang='scss'>
  @use '$/styles/main';
  @use '$/styles/theme' as *;
  @use '$/styles/utils' as *;
  @use '$/styles/variants' as *;

  .outer-wrapper {
    display: block flex;
    position: relative;

    border-radius: $radius-xl2;

    min-block-size: spacing(32);
    inline-size: 100%;

    overflow: hidden;

    .inner-wrapper {
      @extend %card-base;

      position: relative;

      z-index: 10;

      padding-block: spacing(6);
      padding-inline: spacing(9);

      inline-size: 100%;

      :global(article.markdown) {
        margin-block-start: spacing(2);
      }
    }
  }
</style>
