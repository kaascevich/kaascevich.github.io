---
import 'katex/dist/katex.css'
import '$/styles/tailwind.scss'
import '$/styles/main.scss'

import siteConfig from '$/config/site'
import Head, { type Props as HeadProps } from '$/components/global/Head.astro'
import {
  BANNER_HEIGHT_EXTEND,
  BANNER_HEIGHT_HOME,
  PAGE_WIDTH,
} from '$/constants/constants'

export interface Props extends HeadProps {
  fullHeightBanner?: boolean
}

const { fullHeightBanner = false, ...props } = Astro.props

const bannerOffset = {
  top: `${BANNER_HEIGHT_EXTEND}vh`,
  center: `${BANNER_HEIGHT_EXTEND / 4}vh`,
  bottom: '0',
}[siteConfig.banner?.position ?? 'center']
---

<!doctype html>
<html lang="en-US">
  <Head {...props}>
    <!-- define global CSS variables -->
    <style
      lang="scss"
      define:vars={{
        configHue: siteConfig.defaultHue,
        'page-width': `${PAGE_WIDTH}rem`,
      }}
    >
      /* empty */
    </style>

    <slot name="head" slot="head" />
  </Head>

  <body
    class:list={{
      'full-height-banner': fullHeightBanner,
      'enable-banner': siteConfig.banner !== undefined,
    }}
  >
    <slot />

    <!--
      increase page height during transition to prevent scroll animation from
      jumping
    -->
    <div id="page-height-extend"></div>
  </body>
</html>

<style lang="scss">
  @use '$/styles/main';
  @use '$/styles/theme' as *;
  @use '$/styles/utils' as *;
  @use '$/styles/variants' as *;

  html {
    background-color: var(--color-page-bg);

    font-size: 14px;

    body {
      min-block-size: 100vh;
    }

    @include md {
      font-size: 16px;
    }
  }
</style>

<style
  lang="scss"
  is:global
  define:vars={{
    'banner-offset': bannerOffset,
    'banner-height-home': `${BANNER_HEIGHT_HOME}vh`,
  }}
>
  @use '$/styles/main';
  @use '$/styles/theme' as *;
  @use '$/styles/utils' as *;
  @use '$/styles/variants' as *;

  .enable-banner {
    #banner-wrapper {
      block-size: var(--banner-height-home);
    }

    #banner {
      translate: 0 var(--banner-offset);

      block-size: var(--banner-height-home);
    }

    #top-row {
      @include transition($properties: all, $duration: 300ms);

      block-size: calc(var(--banner-height-home) - spacing(18));
    }

    @include lg {
      &.full-height-banner {
        #banner-wrapper {
          translate: 0 var(--banner-height-extend);

          block-size: var(--banner-height-home);
        }

        #banner {
          translate: 0 0;

          block-size: var(--banner-height-home);
        }

        #main-grid {
          translate: 0 var(--banner-height-extend);
        }

        section.sticky {
          inset-block-start: calc(spacing(4) - var(--banner-height-extend));
        }
      }
    }
  }

  .navbar-hidden {
    translate: 0 spacing(-16);

    opacity: 0%;
  }

  #page-height-extend {
    display: none;

    block-size: 300vh;
  }
</style>

<script>
  import { applyColorScheme } from '$/utils/settings/colorScheme'
  import { applyHue } from '$/utils/settings/hue'
  import siteConfig from '$/config/site'

  applyColorScheme()
  applyHue()

  if (siteConfig.banner !== undefined) {
    document.getElementById('banner')!.style.opacity = '100%'
    document.getElementById('banner')!.style.scale = '100%'
  }
</script>

<script>
  import panelSetup from '$/scripts/init/panels'
  import photoswipeSetup from '$/scripts/init/photoswipe'
  import miscSetup from '$/scripts/init/misc'

  panelSetup()

  function setup(swupGlobal: NonNullable<typeof window.swup>) {
    photoswipeSetup(swupGlobal)
    miscSetup(swupGlobal)
  }

  if (window.swup) {
    setup(window.swup)
  } else {
    document.addEventListener('swup:enable', () => setup(window.swup!))
  }
</script>
