---
import '@fontsource-variable/playpen-sans'
import 'katex/dist/katex.css'
import '$/styles/tailwind.scss'
import '$/styles/main.scss'

import siteConfig from '$/config/site'
import Head from '$/components/global/Head.astro'
import {
  BANNER_HEIGHT_EXTEND,
  BANNER_HEIGHT_HOME,
  PAGE_WIDTH,
} from '$/constants/constants'
import { pathsEqual } from '$/utils/urls'

interface Props {
  title?: string
  description?: string
  setOGTypeArticle?: boolean
}

// apply a class to the body element to decide the height of the banner, only
// used for initial page load
//
// Swup can update the body for each page visit, but it's after the page
// transition, causing a delay for banner height change. so we use Swup hooks
// instead to change the height immediately when a link is clicked.
const isHomePage = pathsEqual(Astro.url.pathname, '/')

const bannerOffset = (
  {
    top: `${BANNER_HEIGHT_EXTEND}vh`,
    center: `${BANNER_HEIGHT_EXTEND / 4}vh`,
    bottom: '0',
  } as const
)[siteConfig.banner?.position ?? 'center']
---

<!doctype html>
<html lang="en-US" data-overlayscrollbars-initialize>
  <Head {...Astro.props}>
    <!-- define global CSS variables -->
    <style
      lang="scss"
      define:vars={{
        configHue: siteConfig.defaultHue,
        'page-width': `${PAGE_WIDTH}rem` as const,
      }}
    >
      /* empty */
    </style>

    <slot name="head" slot="head" />
  </Head>

  <body
    class:list={{
      'is-home': isHomePage,
      'enable-banner': siteConfig.banner !== undefined,
    }}
    data-overlayscrollbars-initialize
  >
    <slot />

    <!--
      increase page height during transition to prevent scroll animation from
      jumping
    -->
    <div id="page-height-extend"></div>
  </body>
</html>

<style lang="scss">
  @use '$/styles/main';
  @use '$/styles/theme' as *;
  @use '$/styles/utils' as *;
  @use '$/styles/variants';

  html {
    @include transition;

    background-color: var(--page-bg);

    font-size: 14px;

    @include variants.md {
      font-size: 16px;
    }

    body {
      @include transition;

      min-block-size: 100vh;
    }
  }
</style>

<style
  lang="scss"
  is:global
  define:vars={{
    'banner-offset': bannerOffset,
    'banner-height-home': `${BANNER_HEIGHT_HOME}vh`,
  }}
>
  @use '$/styles/main';
  @use '$/styles/theme' as *;
  @use '$/styles/utils' as *;
  @use '$/styles/variants';

  .enable-banner {
    #banner-wrapper {
      block-size: var(--banner-height-home);
    }

    #banner {
      translate: 0 var(--banner-offset);

      block-size: var(--banner-height-home);
    }

    #top-row {
      @include transition($properties: all, $duration: 300ms);

      block-size: calc(var(--banner-height-home) - 4.5rem);
    }

    @include variants.lg {
      &.is-home {
        #banner-wrapper {
          translate: 0 var(--banner-height-extend);

          block-size: var(--banner-height-home);
        }

        #banner {
          translate: 0 0;

          block-size: var(--banner-height-home);
        }

        #main-grid {
          translate: 0 var(--banner-height-extend);
        }

        section.sticky {
          inset-block-start: calc(1rem - var(--banner-height-extend));
        }
      }
    }
  }

  .navbar-hidden {
    translate: 0 spacing(-16);

    opacity: 0%;
  }

  #page-height-extend {
    display: none;
    block-size: 300vh;
  }
</style>

<script>
  import 'overlayscrollbars/overlayscrollbars.css'
  import { OverlayScrollbars } from 'overlayscrollbars'
  import {
    getHue,
    getColorScheme,
    setHue,
    setColorScheme,
  } from '$/utils/settings'
  import { pathsEqual } from '$/utils/urls'
  import {
    BANNER_HEIGHT,
    BANNER_HEIGHT_HOME,
    BANNER_HEIGHT_EXTEND,
    MAIN_PANEL_OVERLAPS_BANNER_HEIGHT,
  } from '$/constants/constants'
  import siteConfig from '$/config/site'

  const bannerEnabled = document.getElementById('banner-wrapper') !== null

  function setClickOutsideToClose(panel: string, ignores: readonly string[]) {
    document.addEventListener('click', (event) => {
      if (!(event.target instanceof Node)) {
        return
      }

      for (const ignored of ignores) {
        const element = document.getElementById(ignored)
        if (element === event.target || element?.contains(event.target)) {
          return
        }
      }
      document.getElementById(panel)?.classList.add('float-panel-closed')
    })
  }
  setClickOutsideToClose('color-settings', [
    'color-settings',
    'color-settings-switch',
  ])
  setClickOutsideToClose('nav-menu-panel', [
    'nav-menu-panel',
    'nav-menu-switch',
  ])
  setClickOutsideToClose('search-panel', [
    'search-panel',
    'search-bar',
    'search-switch',
  ])

  function loadColorScheme() {
    setColorScheme(getColorScheme())
  }

  function loadHue() {
    setHue(getHue())
  }

  function initCustomScrollbar() {
    if (document.body === null) {
      return
    }

    OverlayScrollbars(
      // docs say that initializing the body element would affect native
      // functionality like `window.scrollTo`, but just leave it here for now
      {
        target: document.body,
        cancel: {
          nativeScrollbarsOverlaid: true,
        },
      },
      {
        scrollbars: {
          theme: 'scrollbar-base scrollbar-auto py-1',
          autoHide: 'move',
          autoHideDelay: 500,
          autoHideSuspend: false,
        },
      },
    )

    for (const element of document.querySelectorAll('pre')) {
      OverlayScrollbars(element, {
        scrollbars: {
          theme: 'scrollbar-base scrollbar-dark px-2',
          autoHide: 'leave',
          autoHideDelay: 500,
          autoHideSuspend: false,
        },
      })
    }

    for (const element of document.querySelectorAll<HTMLElement>(
      '.katex-display',
    )) {
      OverlayScrollbars(element, {
        scrollbars: {
          theme: 'scrollbar-base scrollbar-auto py-1',
        },
      })
    }
  }

  function showBanner() {
    document.getElementById('banner')!.style.opacity = '100%'
    document.getElementById('banner')!.style.scale = '100%'
  }

  function init() {
    loadColorScheme()
    loadHue()
    initCustomScrollbar()
    if (siteConfig.banner !== undefined) {
      showBanner()
    }
  }

  /* load settings when entering the site */
  init()

  function setup() {
    window.swup.hooks.on('link:click', () => {
      // remove first load delay
      document.documentElement.style.setProperty('--content-delay', '0ms')

      // prevent elements from overlapping the navbar
      if (!bannerEnabled) {
        return
      }

      const threshold = window.innerHeight * (BANNER_HEIGHT / 100) - 72 - 16
      const navbar = document.getElementById('navbar-wrapper')

      if (navbar === null || !document.body.classList.contains('is-home')) {
        return
      }

      if (
        document.body.scrollTop >= threshold ||
        document.documentElement.scrollTop >= threshold
      ) {
        navbar.classList.add('navbar-hidden')
      }
    })
    window.swup.hooks.on('content:replace', initCustomScrollbar)
    window.swup.hooks.on('visit:start', (visit) => {
      // change banner height immediately when a link is clicked
      const bodyElement = document.body!
      if (pathsEqual(visit.to.url, '/')) {
        bodyElement.classList.add('is-home')
      } else {
        bodyElement.classList.remove('is-home')
      }

      // increase page height during transition to keep scroll animation from jumping
      document.getElementById('page-height-extend')?.classList.remove('hidden')

      // hide the TOC while scrolling back to top
      document.getElementById('toc-wrapper')?.classList.add('toc-not-ready')
    })
    window.swup.hooks.on('page:view', () => {
      // hide the temp high element when the transition is done
      document.getElementById('page-height-extend')?.classList.remove('hidden')
    })
    window.swup.hooks.on('visit:end', () => {
      setTimeout(() => {
        document.getElementById('page-height-extend')?.classList.add('hidden')

        document
          .getElementById('toc-wrapper')
          ?.classList.remove('toc-not-ready')
      }, 200)
    })
  }

  if (window.swup?.hooks) {
    setup()
  } else {
    document.addEventListener('swup:enable', setup)
  }

  const backToTopBtn = document.getElementById('back-to-top-btn')
  const toc = document.getElementById('toc-wrapper')
  const navbar = document.getElementById('navbar-wrapper')
  function scrollFunction() {
    const bannerHeight = window.innerHeight * (BANNER_HEIGHT / 100)

    if (backToTopBtn !== null) {
      if (
        document.body.scrollTop > bannerHeight ||
        document.documentElement.scrollTop > bannerHeight
      ) {
        backToTopBtn.classList.remove('hide')
      } else {
        backToTopBtn.classList.add('hide')
      }
    }

    if (!bannerEnabled) {
      return
    }

    if (toc !== null) {
      if (
        document.body.scrollTop > bannerHeight ||
        document.documentElement.scrollTop > bannerHeight
      ) {
        toc.classList.remove('toc-hide')
      } else {
        toc.classList.add('toc-hide')
      }
    }
    if (navbar !== null) {
      const NAVBAR_HEIGHT = 72

      // the height the main panel overlaps the banner
      const MAIN_PANEL_EXCESS_HEIGHT = MAIN_PANEL_OVERLAPS_BANNER_HEIGHT * 16

      const bannerHeight =
        document.body.classList.contains('is-home') && window.innerWidth >= 1024
          ? BANNER_HEIGHT_HOME
          : BANNER_HEIGHT

      const threshold =
        window.innerHeight * (bannerHeight / 100) -
        NAVBAR_HEIGHT -
        MAIN_PANEL_EXCESS_HEIGHT -
        16

      if (
        document.body.scrollTop >= threshold ||
        document.documentElement.scrollTop >= threshold
      ) {
        navbar.classList.add('navbar-hidden')
      } else {
        navbar.classList.remove('navbar-hidden')
      }
    }
  }
  window.onscroll = scrollFunction

  window.onresize = () => {
    // --banner-height-extend needs to be a multiple of 4 to avoid blurry text
    const offset = Math.floor(window.innerHeight * (BANNER_HEIGHT_EXTEND / 100))
    const boundedOffset = offset - (offset % 4)
    document.documentElement.style.setProperty(
      '--banner-height-extend',
      `${boundedOffset}px`,
    )
  }
</script>

<script>
  import PhotoSwipeLightbox from 'photoswipe/lightbox'
  import 'photoswipe/style.css'

  let lightbox: PhotoSwipeLightbox | undefined = undefined

  function createPhotoSwipe() {
    lightbox = new PhotoSwipeLightbox({
      gallery: 'article.markdown img, #post-cover img',
      pswpModule: async () => await import('photoswipe'),
      closeSVG: `<svg
        xmlns="http://www.w3.org/2000/svg"
        height="24px"
        viewBox="0 -960 960 960"
        width="24px"
        fill="#ffffff"
      >
        <path
          d="M480-424 284-228q-11 11-28 11t-28-11q-11-11-11-28t11-28l196-196-196-196q-11-11-11-28t11-28q11-11 28-11t28 11l196 196 196-196q11-11 28-11t28 11q11 11 11 28t-11 28L536-480l196 196q11 11 11 28t-11 28q-11 11-28 11t-28-11L480-424Z"
        />
      </svg>`,
      zoomSVG: `<svg
        xmlns="http://www.w3.org/2000/svg"
        height="24px"
        viewBox="0 -960 960 960"
        width="24px"
        fill="#ffffff"
      >
        <path
          d="M340-540h-40q-17 0-28.5-11.5T260-580q0-17 11.5-28.5T300-620h40v-40q0-17 11.5-28.5T380-700q17 0 28.5 11.5T420-660v40h40q17 0 28.5 11.5T500-580q0 17-11.5 28.5T460-540h-40v40q0 17-11.5 28.5T380-460q-17 0-28.5-11.5T340-500v-40Zm40 220q-109 0-184.5-75.5T120-580q0-109 75.5-184.5T380-840q109 0 184.5 75.5T640-580q0 44-14 83t-38 69l224 224q11 11 11 28t-11 28q-11 11-28 11t-28-11L532-372q-30 24-69 38t-83 14Zm0-80q75 0 127.5-52.5T560-580q0-75-52.5-127.5T380-760q-75 0-127.5 52.5T200-580q0 75 52.5 127.5T380-400Z"
        />
      </svg>`,
      padding: { top: 20, bottom: 20, left: 20, right: 20 },
      wheelToZoom: true,
      arrowPrev: false,
      arrowNext: false,
      imageClickAction: 'close',
      tapAction: 'close',
      doubleTapAction: 'zoom',
    })

    lightbox.addFilter('domItemData', (itemData, element) => {
      if (element instanceof HTMLImageElement) {
        itemData.src = element.src

        itemData.width = element.naturalWidth || window.innerWidth
        itemData.height = element.naturalHeight || window.innerHeight

        itemData.msrc = element.src
      }

      return itemData
    })

    lightbox.init()
  }

  function setup() {
    if (lightbox === undefined) {
      createPhotoSwipe()
    }
    window.swup.hooks.on('page:view', () => createPhotoSwipe())

    window.swup.hooks.on('content:replace', () => lightbox?.destroy(), {
      before: true,
    })
  }

  if (window.swup) {
    setup()
  } else {
    document.addEventListener('swup:enable', setup)
  }
</script>
