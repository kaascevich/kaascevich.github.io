@use 'sass:color';
@use 'sass:list';
@use 'sass:meta';
@use 'theme' as *;
@use 'variants';

// MARK: Layout

@function spacing($value) {
  @return calc($spacing * $value);
}

// MARK: Colors

@function alpha($color, $alpha) {
  // make sure Sass knows this is a color value
  @if meta.type-of($color) == color {
    @return color.change($color, $alpha: $alpha);
  } @else {
    // this isn't a color Sass can handle, so fall back to CSS builtins
    // defaulting to oklch because that's primarily what I'm using on this site
    @return oklch(from $color l c h / $alpha);
  }
}

@function white($alpha) {
  @return oklch(100% 0% none / $alpha);
}

@function black($alpha) {
  @return oklch(0% 0% none / $alpha);
}

@function gray($lightness) {
  @return oklch($lightness 0% none);
}

@function with-hue($lightness, $chroma) {
  @return oklch($lightness $chroma var(--hue));
}

@mixin text-plain($alpha) {
  color: light-dark(black($alpha), white($alpha));
}

// MARK: Mixins

@mixin font-size($font-size, $line-height: null) {
  @if $line-height {
    line-height: $line-height;

    font-size: $font-size;
  } @else {
    // if there is no $line-height parameter, assume that $font-size is a
    // 2-element list (we do this so we can use a single variable to describe a
    // font size and a line height)
    line-height: list.nth($font-size, 2);

    font-size: list.nth($font-size, 1);
  }
}

@mixin transition(
  $properties: $transition-properties,
  $function: $transition-function,
  $duration: $transition-duration
) {
  transition-duration: $duration;
  transition-property: $properties;
  transition-timing-function: $function;
}
