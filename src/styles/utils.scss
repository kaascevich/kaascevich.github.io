@use "sass:color";
@use "sass:list";
@use "sass:meta";
@use "theme" as *;
@use "variants";

// MARK: Layout

@function spacing($value) {
  @return calc($spacing * $value);
}

@mixin before($content: "") {
  &::before {
    content: $content;
    @content;
  }
}

@mixin after($content: "") {
  &::after {
    content: $content;
    @content;
  }
}

@mixin margin-x($left, $right: $left) {
  margin: {
    right: $right;
    left: $left;
  }
}

@mixin margin-y($top, $bottom: $top) {
  margin: {
    top: $top;
    bottom: $bottom;
  }
}

@mixin padding-x($left, $right: $left) {
  padding: {
    right: $right;
    left: $left;
  }
}

@mixin padding-y($top, $bottom: $top) {
  padding: {
    top: $top;
    bottom: $bottom;
  }
}

// MARK: Colors

@function alpha($color, $alpha) {
  // make sure Sass knows this is a color value
  @if meta.type-of($color) == color {
    @return color.change($color, $alpha: $alpha);
  } @else {
    // this isn't a color Sass can handle, so fall back to CSS builtins
    // defaulting to oklch because that's primarily what I'm using on this site
    @return oklch(from $color l c h / $alpha);
  }
}

@function white($alpha) {
  @return rgba(255, 255, 255, $alpha);
}

@function black($alpha) {
  @return rgba(0, 0, 0, $alpha);
}

@function with-hue($lightness, $chroma) {
  @return oklch($lightness $chroma var(--hue));
}

@mixin text-plain($alpha) {
  color: black($alpha);
  @include variants.dark {
    color: white($alpha);
  }
}

// MARK: Mixins

@mixin font-size($font-size, $line-height: null) {
  @if $line-height {
    font-size: $font-size;
    line-height: $line-height;
  } @else {
    // if there is no $line-height parameter, assume that $font-size is a
    // 2-element list (we do this so we can use a single variable to describe a
    // font size and a line height)
    font-size: list.nth($font-size, 1);
    line-height: list.nth($font-size, 2);
  }
}

@mixin transition(
  $properties: $transition-properties,
  $function: $ease-in-out,
  $duration: $transition-duration,
  $important: ""
) {
  transition: $function $duration {
    property: $properties;
  }
}
